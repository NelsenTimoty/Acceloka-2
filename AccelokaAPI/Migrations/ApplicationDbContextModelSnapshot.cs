// <auto-generated />
using System;
using AccelokaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccelokaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccelokaAPI.Models.BookedTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BookedTickets");
                });

            modelBuilder.Entity("AccelokaAPI.Models.BookedTicketDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookedTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookedTicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("BookedTicketDetails");
                });

            modelBuilder.Entity("AccelokaAPI.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("d1b2c3d4-e5f6-789a-bcde-f01234567890"),
                            CategoryName = "Concert"
                        },
                        new
                        {
                            CategoryId = new Guid("a1b2c3d4-e5f6-789a-bcde-f01234567891"),
                            CategoryName = "Sports"
                        },
                        new
                        {
                            CategoryId = new Guid("a1b2c3d4-e5f6-789a-bcde-f01234567892"),
                            CategoryName = "Theater"
                        });
                });

            modelBuilder.Entity("AccelokaAPI.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quota")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1b2c3d4-e5f6-789a-bcde-f01234567893"),
                            CategoryId = new Guid("d1b2c3d4-e5f6-789a-bcde-f01234567890"),
                            Code = "RF001",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "SYSTEM",
                            EventDate = new DateTime(2026, 3, 16, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Queens Rock Festival",
                            Price = 150.00m,
                            Quota = 100,
                            UpdatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("f1b2c3d4-e5f6-789a-bcde-f01234567894"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-789a-bcde-f01234567891"),
                            Code = "BF002",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "SYSTEM",
                            EventDate = new DateTime(2024, 1, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "NBA Basketball Finals",
                            Price = 200.00m,
                            Quota = 50,
                            UpdatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("f1b2c3d4-e5f6-789a-bcde-f01234567843"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-789a-bcde-f01234567892"),
                            Code = "BM003",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "SYSTEM",
                            EventDate = new DateTime(2026, 3, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Hollywood Broadway Musical",
                            Price = 180.00m,
                            Quota = 75,
                            UpdatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "SYSTEM"
                        });
                });

            modelBuilder.Entity("AccelokaAPI.Models.BookedTicketDetail", b =>
                {
                    b.HasOne("AccelokaAPI.Models.BookedTicket", "BookedTicket")
                        .WithMany("BookedTicketDetails")
                        .HasForeignKey("BookedTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccelokaAPI.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookedTicket");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AccelokaAPI.Models.Ticket", b =>
                {
                    b.HasOne("AccelokaAPI.Models.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AccelokaAPI.Models.BookedTicket", b =>
                {
                    b.Navigation("BookedTicketDetails");
                });

            modelBuilder.Entity("AccelokaAPI.Models.Category", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
